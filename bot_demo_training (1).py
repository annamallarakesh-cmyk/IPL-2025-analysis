# -*- coding: utf-8 -*-
"""bot demo training.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1InPVWNtRPJXHj5NFgsoHDWnrOuxHTkB-
"""

!pip install -q pandasai openai

import pandas as pd
from pandasai import SmartDataframe
from pandasai.llm.openai import OpenAI

from google.colab import files
import io

uploaded = files.upload()

# Show the actual uploaded filename
print(uploaded.keys())

# Pick the correct filename dynamically
filename = list(uploaded.keys())[0]   # gets the first uploaded file
df = pd.read_csv(io.BytesIO(uploaded[filename]))

df.drop_duplicates(inplace=True)

# OR, remove duplicates only based on 'Players' column (keeping the first occurrence)
df.drop_duplicates(subset=['Players'], inplace=True)

# To reset the index after dropping duplicates
df.reset_index(drop=True, inplace=True)

df.head()
# Find player(s) with max Sold value
max_sold = df["Sold"].max()
costliest_players = df[df["Sold"] == max_sold][["Players", "Team", "Sold"]]

print(costliest_players)

from google.colab import files
import io

uploaded = files.upload()

# Show the actual uploaded filename
print(uploaded.keys())

# Pick the correct filename dynamically
filename = list(uploaded.keys())[0]   # gets the first uploaded file
df = pd.read_csv(io.BytesIO(uploaded[filename]))

# Find the minimum Sold price
min_sold = df["Sold"].min()

# Get the players and teams with that minimum Sold price
cheapest_players = df[df["Sold"] == min_sold][["Players", "Team", "Sold"]]

print("Cheapest buys this season:")
print(cheapest_players)

from google.colab import files
import io
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Upload file
uploaded = files.upload()

filename = list(uploaded.keys())[0]
df = pd.read_csv(io.BytesIO(uploaded[filename]))

# Clean 'Sold' column
df["Sold"] = df["Sold"].replace("-", np.nan)  # replace dash with NaN
df["Sold"] = pd.to_numeric(df["Sold"], errors="coerce")  # convert to float

# Group by team and sum
team_spending = df.groupby("Team")["Sold"].sum().sort_values(ascending=False)

# Plot bar chart
plt.figure(figsize=(12,6))
team_spending.plot(kind="bar")

plt.title("Total Money Spent by Each Team This Season")
plt.xlabel("Team")
plt.ylabel("Total Money Spent")
plt.xticks(rotation=45)
plt.show()

from google.colab import files
import io
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Upload file
uploaded = files.upload()

filename = list(uploaded.keys())[0]
df = pd.read_csv(io.BytesIO(uploaded[filename]))

bowlers = df[df["Type"].str.upper() == "BOWLER"]

# Filter only bowlers
bowlers = df[df["Type"].str.upper() == "BOWL"].copy()

# 1. Count unsold bowlers
unsold_bowlers = bowlers[bowlers["Sold"].str.upper() == "UNSOLD"]
count_unsold_bowlers = unsold_bowlers.shape[0]

# 2. Sold bowlers (numeric values in 'Sold')
sold_bowlers = bowlers[bowlers["Sold"].str.upper() != "UNSOLD"].copy()
sold_bowlers["Sold"] = pd.to_numeric(sold_bowlers["Sold"], errors="coerce")

# Best (highest) and cheapest (lowest) sold prices
best_sold_price = sold_bowlers["Sold"].max()
cheapest_sold_price = sold_bowlers["Sold"].min()

# Get player(s) with best and cheapest price
best_sold_bowlers = sold_bowlers[sold_bowlers["Sold"] == best_sold_price][["Players", "Sold"]]
cheapest_sold_bowlers = sold_bowlers[sold_bowlers["Sold"] == cheapest_sold_price][["Players", "Sold"]]

print("Number of unsold bowlers:", count_unsold_bowlers)
print("\nUnsold bowlers with base price:")
print(unsold_bowlers[["Players", "Base"]])

print("\nBest sold bowler(s):")
print(best_sold_bowlers)

print("\nCheapest sold bowler(s):")
print(cheapest_sold_bowlers)

from google.colab import files
import io
import pandas as pd
import numpy as np

# Upload file
uploaded = files.upload()

filename = list(uploaded.keys())[0]
df = pd.read_csv(io.BytesIO(uploaded[filename]))

# Count total unsold players
unsold_players = df[df["Sold"].str.upper() == "UNSOLD"]
count_unsold_players = unsold_players.shape[0]

print("Total number of players remained unsold this season:", count_unsold_players)